on:
  workflow_call:
    inputs:
      executable:
        required: true
        type: string
      member:
        required: true
        type: string
      tag:
        required: true
        type: string
    secrets:
      CARGO_REGISTRY_TOKEN:
        required: true

jobs:
  upload:
    name: Upload ${{ inputs.executable }} for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    defaults:
      run:
        shell: bash

    env:
      CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
      EXE_SUFFIX: ${{ matrix.os == 'windows-latest' && '.exe' || '' }}

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('./Cargo.lock') }}-${{ inputs.member }}

      - name: Build
        id: build
        run: |
          cargo build --release --locked -p ${{ inputs.member }}
          cargo test --release --locked -p ${{ inputs.member }}

          export BINARY_NAME="${{ inputs.executable }}-$(rustc --version --verbose | grep host | cut -d ' ' -f 2)${EXE_SUFFIX}"
          mv "target/release/${{ inputs.executable }}${EXE_SUFFIX}" "./${BINARY_NAME}"
          echo "binary=${BINARY_NAME}" >> $GITHUB_OUTPUT

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish -p ${{ inputs.member }} ${{ env.ACT && '--dry-run' }}
        if: ${{ matrix.os == 'ubuntu-latest' && !env.ACT }}

      - name: Upload to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${{ inputs.tag }}" ${{ steps.build.outputs.binary  }}
        if: ${{ !env.ACT }}

      - name: Upload to artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{steps.build.outputs.binary}}
          path: ${{steps.build.outputs.binary}}
        if: ${{ env.ACT }}
